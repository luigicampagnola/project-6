{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/luigi/Projects/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/luigi/Projects/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/luigi/Projects/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/luigi/Projects/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n      var maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n      var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      this.applyPath(delta);\n      var gravityOptions = particlesOptions.move.gravity;\n\n      if (gravityOptions.enable) {\n        particle.velocity.vertical += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n      }\n\n      var decay = 1 - particle.options.move.decay;\n      particle.velocity.horizontal *= decay;\n      particle.velocity.vertical *= decay;\n      var velocity = {\n        horizontal: particle.velocity.horizontal * moveSpeed,\n        vertical: particle.velocity.vertical * moveSpeed\n      };\n\n      if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n        velocity.vertical = gravityOptions.maxSpeed;\n        particle.velocity.vertical = velocity.vertical / moveSpeed;\n      }\n\n      particle.position.x += velocity.horizontal;\n      particle.position.y += velocity.vertical;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      var initialPosition = particle.initialPosition;\n      var initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n          particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.horizontal < 0 || particle.position.x > initialPosition.x && particle.velocity.horizontal > 0) {\n            particle.velocity.horizontal *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.vertical < 0 || particle.position.y > initialPosition.y && particle.velocity.vertical > 0) {\n            particle.velocity.vertical *= -Math.random();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var generator = container.pathGenerator;\n\n      if (pathOptions.generator) {\n        var customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n        if (customGenerator) {\n          generator = customGenerator;\n        }\n      }\n\n      var path = generator.generate(particle);\n      particle.velocity.horizontal += Math.cos(path.angle) * path.length;\n      particle.velocity.vertical += Math.sin(path.angle) * path.length;\n\n      if (pathOptions.clamp) {\n        particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n        particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["C:/Users/luigi/Projects/test1/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","container","particle","delta","bubble","inRange","links","plugins","plugin","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","reduceFactor","maxSize","sizeValue","sizeFactor","size","getRadius","factor","applyPath","gravityOptions","gravity","velocity","vertical","acceleration","decay","horizontal","maxSpeed","position","x","y","vibrate","Math","sin","cos","initialPosition","initialDistance","NumberUtils","getDistance","maxDistance","misplaced","random","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","angle","length","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n        const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        if (gravityOptions.enable) {\n            particle.velocity.vertical += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = 1 - particle.options.move.decay;\n        particle.velocity.horizontal *= decay;\n        particle.velocity.vertical *= decay;\n        const velocity = {\n            horizontal: particle.velocity.horizontal * moveSpeed,\n            vertical: particle.velocity.vertical * moveSpeed,\n        };\n        if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.vertical = gravityOptions.maxSpeed;\n            particle.velocity.vertical = velocity.vertical / moveSpeed;\n        }\n        particle.position.x += velocity.horizontal;\n        particle.position.y += velocity.vertical;\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n                particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.horizontal < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.horizontal > 0)) {\n                    particle.velocity.horizontal *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.vertical < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.vertical > 0)) {\n                    particle.velocity.vertical *= -Math.random();\n                }\n            }\n        }\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.horizontal += Math.cos(path.angle) * path.length;\n        particle.velocity.vertical += Math.sin(path.angle) * path.length;\n        if (pathOptions.clamp) {\n            particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n            particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}