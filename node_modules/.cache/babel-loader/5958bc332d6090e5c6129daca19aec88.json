{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nconst Directions_1 = require(\"../Enums/Directions\");\n\nclass NumberUtils {\n  static clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  static mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  }\n\n  static randomInRange(r) {\n    const max = NumberUtils.getRangeMax(r);\n    let min = NumberUtils.getRangeMin(r);\n\n    if (max === min) {\n      min = 0;\n    }\n\n    return Math.random() * (max - min) + min;\n  }\n\n  static getRangeValue(value) {\n    return typeof value === \"number\" ? value : NumberUtils.randomInRange(value);\n  }\n\n  static getRangeMin(value) {\n    return typeof value === \"number\" ? value : value.min;\n  }\n\n  static getRangeMax(value) {\n    return typeof value === \"number\" ? value : value.max;\n  }\n\n  static setRangeValue(source, value) {\n    if (source === value || value === undefined && typeof source === \"number\") {\n      return source;\n    }\n\n    const min = NumberUtils.getRangeMin(source),\n          max = NumberUtils.getRangeMax(source);\n    return value !== undefined ? {\n      min: Math.min(min, value),\n      max: Math.max(max, value)\n    } : NumberUtils.setRangeValue(min, max);\n  }\n\n  static getValue(options) {\n    const random = options.random;\n    const {\n      enable,\n      minimumValue\n    } = typeof random === \"boolean\" ? {\n      enable: random,\n      minimumValue: 0\n    } : random;\n    return enable ? NumberUtils.randomInRange({\n      min: minimumValue,\n      max: options.value\n    }) : options.value;\n  }\n\n  static getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return {\n      dx: dx,\n      dy: dy,\n      distance: Math.sqrt(dx * dx + dy * dy)\n    };\n  }\n\n  static getDistance(pointA, pointB) {\n    return NumberUtils.getDistances(pointA, pointB).distance;\n  }\n\n  static getParticleBaseVelocity(particle) {\n    let velocityBase;\n\n    switch (particle.direction) {\n      case Directions_1.MoveDirection.top:\n        velocityBase = {\n          x: 0,\n          y: -1\n        };\n        break;\n\n      case Directions_1.MoveDirection.topRight:\n        velocityBase = {\n          x: 0.5,\n          y: -0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.right:\n        velocityBase = {\n          x: 1,\n          y: -0\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomRight:\n        velocityBase = {\n          x: 0.5,\n          y: 0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottom:\n        velocityBase = {\n          x: 0,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomLeft:\n        velocityBase = {\n          x: -0.5,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.left:\n        velocityBase = {\n          x: -1,\n          y: 0\n        };\n        break;\n\n      case Directions_1.MoveDirection.topLeft:\n        velocityBase = {\n          x: -0.5,\n          y: -0.5\n        };\n        break;\n\n      default:\n        velocityBase = {\n          x: 0,\n          y: 0\n        };\n        break;\n    }\n\n    return velocityBase;\n  }\n\n  static rotateVelocity(velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  }\n\n  static collisionVelocity(v1, v2, m1, m2) {\n    return {\n      horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n      vertical: v1.vertical\n    };\n  }\n\n}\n\nexports.NumberUtils = NumberUtils;","map":{"version":3,"sources":["C:/Users/luigi/Projects/test1/node_modules/tsparticles/dist/Utils/NumberUtils.js"],"names":["Object","defineProperty","exports","value","NumberUtils","Directions_1","require","clamp","num","min","max","Math","mix","comp1","comp2","weight1","weight2","floor","randomInRange","r","getRangeMax","getRangeMin","random","getRangeValue","setRangeValue","source","undefined","getValue","options","enable","minimumValue","getDistances","pointA","pointB","dx","x","dy","y","distance","sqrt","getDistance","getParticleBaseVelocity","particle","velocityBase","direction","MoveDirection","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","rotateVelocity","velocity","angle","horizontal","cos","vertical","sin","collisionVelocity","v1","v2","m1","m2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberUtils = void 0;\nconst Directions_1 = require(\"../Enums/Directions\");\nclass NumberUtils {\n    static clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    }\n    static mix(comp1, comp2, weight1, weight2) {\n        return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n    static randomInRange(r) {\n        const max = NumberUtils.getRangeMax(r);\n        let min = NumberUtils.getRangeMin(r);\n        if (max === min) {\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n    }\n    static getRangeValue(value) {\n        return typeof value === \"number\" ? value : NumberUtils.randomInRange(value);\n    }\n    static getRangeMin(value) {\n        return typeof value === \"number\" ? value : value.min;\n    }\n    static getRangeMax(value) {\n        return typeof value === \"number\" ? value : value.max;\n    }\n    static setRangeValue(source, value) {\n        if (source === value || (value === undefined && typeof source === \"number\")) {\n            return source;\n        }\n        const min = NumberUtils.getRangeMin(source), max = NumberUtils.getRangeMax(source);\n        return value !== undefined\n            ? {\n                min: Math.min(min, value),\n                max: Math.max(max, value),\n            }\n            : NumberUtils.setRangeValue(min, max);\n    }\n    static getValue(options) {\n        const random = options.random;\n        const { enable, minimumValue } = typeof random === \"boolean\" ? { enable: random, minimumValue: 0 } : random;\n        return enable ? NumberUtils.randomInRange({ min: minimumValue, max: options.value }) : options.value;\n    }\n    static getDistances(pointA, pointB) {\n        const dx = pointA.x - pointB.x;\n        const dy = pointA.y - pointB.y;\n        return { dx: dx, dy: dy, distance: Math.sqrt(dx * dx + dy * dy) };\n    }\n    static getDistance(pointA, pointB) {\n        return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n    static getParticleBaseVelocity(particle) {\n        let velocityBase;\n        switch (particle.direction) {\n            case Directions_1.MoveDirection.top:\n                velocityBase = { x: 0, y: -1 };\n                break;\n            case Directions_1.MoveDirection.topRight:\n                velocityBase = { x: 0.5, y: -0.5 };\n                break;\n            case Directions_1.MoveDirection.right:\n                velocityBase = { x: 1, y: -0 };\n                break;\n            case Directions_1.MoveDirection.bottomRight:\n                velocityBase = { x: 0.5, y: 0.5 };\n                break;\n            case Directions_1.MoveDirection.bottom:\n                velocityBase = { x: 0, y: 1 };\n                break;\n            case Directions_1.MoveDirection.bottomLeft:\n                velocityBase = { x: -0.5, y: 1 };\n                break;\n            case Directions_1.MoveDirection.left:\n                velocityBase = { x: -1, y: 0 };\n                break;\n            case Directions_1.MoveDirection.topLeft:\n                velocityBase = { x: -0.5, y: -0.5 };\n                break;\n            default:\n                velocityBase = { x: 0, y: 0 };\n                break;\n        }\n        return velocityBase;\n    }\n    static rotateVelocity(velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    }\n    static collisionVelocity(v1, v2, m1, m2) {\n        return {\n            horizontal: (v1.horizontal * (m1 - m2)) / (m1 + m2) + (v2.horizontal * 2 * m2) / (m1 + m2),\n            vertical: v1.vertical,\n        };\n    }\n}\nexports.NumberUtils = NumberUtils;\n"]},"metadata":{},"sourceType":"script"}